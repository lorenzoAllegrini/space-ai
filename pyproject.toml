[tool.poetry]
name = "spaceai"
version = "0.2.0"
description = "A Python library for space AI benchmarking"
authors = ["ContinualIST <valerio.decaro@di.unipi.it>"]
maintainers = [
    "Valerio De Caro <valerio.decaro@di.unipi.it>",
    "Geremia Pompei <geremia.pompei@di.unipi.it>"
]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/continualist/space-ai"
repository = "https://github.com/continualist/space-ai"

[tool.poetry.build]
script = "build.py"
generate-setup-file = false

[tool.poetry.dependencies]
python = "^3.10"
argparse = "^1.4.0"
numpy = "^2.1.3"
pandas = "^2.2.2"
scikit-learn = "^1.5.1"
more-itertools = "^10.3.0"
tqdm = "^4.66.5"
datetime = "^5.5"
requests = "^2.32.3"
psutil = "^6.1.0"
torchdyno = "^0.2.3"
torch = "^2.4.0"
torchvision = "^0.19.0"
open-clip-torch = "^2.24.0"
pillow = "^11.0.0"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
black = "^24.3.0"
commitizen = "^3.12.0"
pre-commit = "^3.5.0"
isort = "^5.13.2"
pycln = "^2.4.0"
pylint = "^3.1.0"
docformatter = { extras = ["tomli"], version = "^1.7.5" }

[tool.poetry.group.deploy]
optional = true

[tool.poetry.group.deploy.dependencies]
mypy = "^1.13.0"
wheel = "^0.45.0"
setuptools = "^75.5.0"
twine = "^5.1.1"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
sphinx = "^7.2.6"
sphinx-copybutton = "^0.5.2"
sphinx-book-theme = "^1.1.2"
jinja2 = "^3.1.4"
docformatter = { extras = ["tomli"], version = "^1.7.5" }
sphinx-autobuild = "^2024.2.4"
enum-tools = { extras = ["sphinx"], version = "^0.11.0" }
sphinx-favicon = "^1.0.1"
sphinx-design = "^0.5.0"
myst-parser = "^2.0.0"
sphinx-icon = "^0.2.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.2.0"
tag_format = "$version"
version_files = [
    "pyproject.toml:version",
    "spaceai/__init__.py:__version__",
    "setup.py:version",
]

[tool.pycln]
all = true

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 2
filter_files = true
skip = ["__init__.py"]

[tool.docformatter]
recursive = true
black = true

[tool.pytest.ini_options]
testpaths = "tests"
addopts = "--cov-report=xml --cov-report=term-missing --cov"
filterwarnings = ["ignore::DeprecationWarning"]
